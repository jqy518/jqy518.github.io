<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋青云的个人博客</title>
  
  <subtitle>比你聪明的家伙却比你更努力，多么可怕！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jekion.com/"/>
  <updated>2018-08-12T22:56:11.404Z</updated>
  <id>http://jekion.com/</id>
  
  <author>
    <name>jekion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx学习笔记（一）</title>
    <link href="http://jekion.com/2018/05/28/nginx_note1/"/>
    <id>http://jekion.com/2018/05/28/nginx_note1/</id>
    <published>2018-05-27T22:12:26.000Z</published>
    <updated>2018-08-12T22:56:11.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx学习笔记（一）"><a href="#Nginx学习笔记（一）" class="headerlink" title="Nginx学习笔记（一）"></a>Nginx学习笔记（一）</h3><p>目标:学会<code>nginx</code>的编译安装及添加模块，及以基本的配置；常用指令。<br><a id="more"></a></p><h4 id="虚拟服务器"><a href="#虚拟服务器" class="headerlink" title="虚拟服务器"></a>虚拟服务器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.jekion.com *.jekion.com;</span><br><span class="line">        access_log E:\youngsunBook\_book\access_log.log combined;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   E:\youngsunBook\_book;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Nginx-启动，关闭，平滑重启"><a href="#Nginx-启动，关闭，平滑重启" class="headerlink" title="Nginx 启动，关闭，平滑重启"></a>Nginx 启动，关闭，平滑重启</h4><p>1)从容的停止Nginx</p><blockquote><p>kill -QUIT Nginx主进程号</p><p>kill - QUIT ‘/usr/local/webserver/logs/nginx.pid’<br>2)快速停止Nginx<br>kill -TERM Nginx主进程号</p><p>kill -TERM ‘…./ngnix.pid’</p><p>kill -INT Nginx主进程号</p><p>kill -INT ‘…/nginx.pid’</p></blockquote><p>3)强制停止所有Nginx进程</p><blockquote><p>pkill -9 nginx</p></blockquote><h5 id="nginx的平滑重启"><a href="#nginx的平滑重启" class="headerlink" title="nginx的平滑重启"></a>nginx的平滑重启</h5><p>当Nginx配置文件（nginx.conf）改变时，想重启nginx我们可以如下操作：<br>测试配置文件的正确性，</p><blockquote><p>nginx -t -c /usr/local/webserver/nginx/conf/nginx.conf</p></blockquote><p>如果正确我们可以发送信息给nginx主进程的方式来进行：</p><blockquote><p>kill -HUP Nginx主进程号</p><p>kill -HUP ‘nginx pid 路径’</p></blockquote><h5 id="nginx-的信号控制"><a href="#nginx-的信号控制" class="headerlink" title="nginx 的信号控制"></a>nginx 的信号控制</h5><blockquote><p>TREM,INT 快速关闭<br><br>QUIT 从容关闭<br><br>HUP 平滑重启,重新加载配置文件<br><br>USR1 重新打开日志文件,在切割日志时用途较多<br><br>USR2 平滑升级可执行<br><br>WINCH 从容关闭工作进程<br></p><h4 id="日志配置及分割"><a href="#日志配置及分割" class="headerlink" title="日志配置及分割"></a>日志配置及分割</h4><p>nginx中与日志相关的指令有两条：</p><p>log_format —日志格式方式 <br><br>access_log —日志存在目录</p></blockquote><p>log_format 格式如下：</p><blockquote><p>log_format name format [format …]</p></blockquote><p>ps:log_format指令设置的name名称在Nginx配置文件中是不能重复的。</p><p><code>log_format</code> 有一默认的无须设置的<code>combined</code>日志格式设置，如下:</p><blockquote><p>log_format combined ‘$remote_addr - $remote_user [$time_local] ‘<br> ‘“$request” $status $body_bytes_sent’<br> ‘“$http_referer” “$http_user_agent”‘</p></blockquote><p> 格式实例如下:</p><blockquote><p>127.0.0.1 - - [13/Jul/2018:06:34:05 +0800] “GET /gitbook/images/favicon.ico HTTP/1.1” 200 4286 “<a href="http://bbb.jekion.com/" target="_blank" rel="noopener">http://bbb.jekion.com/</a>“ “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36”</p></blockquote><p>我们知道如果用nginx作为web服务器，位于负载均衡设备，Squid,反向代理之后；我们是获取不了用户实际ip地址的；因为中间加了一层，<code>$remote_addr</code>取到的是中层间的ip；</p><p>解决方法：反向代理服务器在转发请求的HTTP头信息中，可以增加<code>X-Forwarded-For</code>信息，用户记录原有的客户端Ip地址和原来客户端请求的服务器地址再用<code>$http_x_forwarded_for</code>变量取的。</p><blockquote><p>log_format mylogformat ‘$http_x_forwarded_for - …..’</p></blockquote><p>access_log格式如下:</p><blockquote><p>access_log path [format [buffer=size | off]]</p></blockquote><p>其中：</p><blockquote><p>path 指日志文件存在路径，format表示使用 log_format指令日志格式名称；buffer=size表示设置内存缓冲区的大小，buffer=32k</p></blockquote><p>(1)如果不想记录日志，可以使用以下指令关闭日志记录:</p><blockquote><p>access_log off;</p></blockquote><h4 id="Nginx压缩输出"><a href="#Nginx压缩输出" class="headerlink" title="Nginx压缩输出"></a>Nginx压缩输出</h4><p>压缩输出的相关指令位于http { … }两个大括号之间：</p><blockquote><p>#开启gzip模块 <br><br>gzip on;<br></p><p>#<br><br>gzip_min_length 1k;<br><br>gzip_buffers 4 16k;<br><br>gzip_http_version 1.1;<br><br>gzip_comp_level 2;<br><br>gzip_types text/html text/plain application/x-javascript text/css applicaiton/xml;<br><br>gzip_vary on;</p></blockquote><h4 id="Nginx-自动列目录配置"><a href="#Nginx-自动列目录配置" class="headerlink" title="Nginx 自动列目录配置"></a>Nginx 自动列目录配置</h4><p>前提条件是目录下不存在用index指令设置的默认首页文件。然后加下以下指令。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    autoindex on;</span><br><span class="line">    #设定索引时文件大小的单位（B/KB/MB/GB/）</span><br><span class="line">    autoindex_exact_size [on|off];</span><br><span class="line">    #开启以本地时间来显示文件时间的功能</span><br><span class="line">    autoindex_localtime [on|off];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Nginx的浏览器本地缓存设置"><a href="#Nginx的浏览器本地缓存设置" class="headerlink" title="Nginx的浏览器本地缓存设置"></a>Nginx的浏览器本地缓存设置</h4><blockquote><p>expires [time|epoch|max|off] <br><br><code>time</code> 为一个数值，默认单位为秒 如： expires 20 ，expires 30d | 1h<br><br><code>epoch</code> expires的值为 1 January 1970,00:00:01 GMT<br><br><code>max</code> expires的值为当前时间+10年；<br><br><code>-1</code>即永远过期。<br><br><code>off</code>表示不修改。</p></blockquote><p>对指定格式的文件进行缓存设置:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">&#123;</span><br><span class="line">    expires 30d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>expires</code>默认值<code>off</code>,作用域:http,server,localtion</p><h3 id="Nginx的Rewrite规则"><a href="#Nginx的Rewrite规则" class="headerlink" title="Nginx的Rewrite规则"></a>Nginx的Rewrite规则</h3><p>Rewrite主要的功能就是实现URL的重写，Nginx的Rewrite规则采用PCRE Perl兼容正则表达式的语法进行规则匹配，如果您需要Nginx的Rewrite功能，在编译Nginx之前，须要编译安装PCRE库。</p><p>Nginx Rewrite规则相关指令有<code>if,rewrite,set,return,break</code>等；</p><h4 id="break指令："><a href="#break指令：" class="headerlink" title="break指令："></a>break指令：</h4><p>该指令的作用是完成当前的规则集，不再处理rewrite指令。<br>使用环境：server,location,if</p><p>如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="if指令："><a href="#if指令：" class="headerlink" title="if指令："></a>if指令：</h4><p>if指令不支持嵌套，不支持多个条件<code>&amp;&amp;</code>和<code>||</code>处理;<br>使用环境：<code>server</code> <code>location</code></p><p>以下信息可以被指定为条件：<br>（1）变量名，错误的值包括：空字符串“”，或者任何以0开始的字符串；<br><br>（2）变量比较可以使用 <code>=</code>和<code>!=</code>运算符；<br><br>（3）正则表达式模式匹配可以使用<code>~*</code>(表示不区分大小定匹配)和<code>~</code>（表示区分大小定字母匹配）<br><br>（4）<code>!~</code>和<code>!~*</code>和<code>~</code>,<code>~*</code>相反，表示不匹配。<br><br>（5）<code>-f</code>和<code>!-f</code> 用来判断文件是否存在。<br><br>（6）<code>-d</code>和<code>!-d</code> 用来判断目录是否存在。<br><br>（7）<code>-e</code>和<code>!-e</code> 用来判断文件或目录是否存在。<br><br>（8）<code>-x</code>和<code>!-x</code> 用来判断文件是否可执行。<br><br>（9）<code>$1到$9</code>可以访问正则表示匹配组。</p><p>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/$1 break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($http_cookie ~* "id=([^;] +)(?:;|$)" ) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="return-指令"><a href="#return-指令" class="headerlink" title="return 指令"></a>return 指令</h4><p>使用环境:<code>server</code>,<code>location</code>,<code>if</code> <br><br>该指令用于结束规则的执行并返回状态给客户端。状态码可以使用这些值：204，400，402-406，408，410，413，416及500-504；此外非标准状态码444（将以不发送任何Header关的方式结束连接）。<br>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(sh|bash)?$ </span><br><span class="line">&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="rewrite-指令"><a href="#rewrite-指令" class="headerlink" title="rewrite 指令"></a>rewrite 指令</h4><p>语法： rewrite regex replacement flag <br><br>使用环境：<code>server</code>,<code>location</code>,<code>if</code><br><br>该指令根据表达式来重定向URL，或者修改字符串。指令根据配置文件中的顺序来执行。注意重写表达式只对相对路径有效。如果你配对主机名，你应该使用if语句。</p><p>rewrite 指令的最后一项参数为 <code>flag</code>标记，表示完成rewrite:</p><blockquote><p><code>last</code> —-相当于Apache里的L标记，表示完成rewrite;<br><code>break</code> —-本条规则匹配完成后，终止匹配，不再匹配后面的规则；<br><br><code>redirect</code> —- 返回302临时重定向，浏览器地址栏会显示跳转后的url地址。<br><br><code>permanent</code> —-返回301永久重定向，浏览器地址栏会显示跳转后的URL地址。</p></blockquote><h4 id="Ngnix-Rewrite-可用到的全局变量"><a href="#Ngnix-Rewrite-可用到的全局变量" class="headerlink" title="Ngnix Rewrite 可用到的全局变量"></a>Ngnix Rewrite 可用到的全局变量</h4><p>在<code>if</code>,<code>location</code>,<code>rewrite</code> 指令中，可以使用以下全局变量：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$args </span><br><span class="line">$content_length </span><br><span class="line">$content_type </span><br><span class="line">$document_root </span><br><span class="line">$document_uri </span><br><span class="line">$host</span><br><span class="line">$http_user_agent</span><br><span class="line">$http_cookie</span><br><span class="line">$limit_rate</span><br><span class="line">$request_body_file</span><br><span class="line">$request_method</span><br><span class="line">$remote_addr</span><br><span class="line">$remote_port</span><br><span class="line">$remote_user</span><br><span class="line">$request_filename</span><br><span class="line">$request_uri</span><br><span class="line">$query_string</span><br><span class="line">$scheme</span><br><span class="line">$server_addr</span><br><span class="line">$server_name</span><br><span class="line">$server_port</span><br><span class="line">$uri</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Nginx学习笔记（一）&quot;&gt;&lt;a href=&quot;#Nginx学习笔记（一）&quot; class=&quot;headerlink&quot; title=&quot;Nginx学习笔记（一）&quot;&gt;&lt;/a&gt;Nginx学习笔记（一）&lt;/h3&gt;&lt;p&gt;目标:学会&lt;code&gt;nginx&lt;/code&gt;的编译安装及添加模块，及以基本的配置；常用指令。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
      <category term="nginx" scheme="http://jekion.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>LINUX笔记5-VI编辑器</title>
    <link href="http://jekion.com/2017/07/12/linux_note_5/"/>
    <id>http://jekion.com/2017/07/12/linux_note_5/</id>
    <published>2017-07-12T13:15:26.000Z</published>
    <updated>2017-12-28T07:26:19.999Z</updated>
    
    <content type="html"><![CDATA[<p>基本上    vi    共分为三种模式,分别是“一般指令模式”、“编辑模式”与“命令行命令模式”。</p><ul><li><p>一般指令模式；<br>vi    打开一个文件就直接进入一般指令模式了(这是默认的模式,也简称为一般模式)。在这个模式中,<br>你可以使用“上下左右”按键来移动光标,你可以使用“删除字符”或“删除整列”来处理文件内容,    也可以使用“复制、贴上”来处理你的文件数据。</p><a id="more"></a></li><li><p>编辑模式</p></li></ul><p>按下“i,    I,o,O,a,A,r,R”等任何一个字母之后才会进入编辑模式。</p><ul><li>命令行命令模式</li></ul><p>在一般模式当中,输入“    :    /    ?    ”三个中的任何一个按钮,就可以将光标移动到最下面那一列;打开命令模式。</p><h5 id="一般指令模式下常用热键说明："><a href="#一般指令模式下常用热键说明：" class="headerlink" title="一般指令模式下常用热键说明："></a>一般指令模式下常用热键说明：</h5><table><thead><tr><th>热键</th><th>说明</th></tr></thead><tbody><tr><td>[Ctrl]    +    [f]</td><td>屏幕“向下”移动一页,相当于    [Page    Down]按键</td></tr><tr><td>[Ctrl]    +    [b]</td><td>屏幕“向上”移动一页,相当于    [Page    Up]    按键</td></tr><tr><td>hjkl/←↓↑→</td><td>光标向不同方向移动一个字符（30j/↓向下移动30列）</td></tr><tr><td>GG/nG/gg</td><td>移动到最后/指定的n/第一列</td></tr><tr><td>$    或功能键[End]</td><td>移动到这一列的最后面字符处</td></tr><tr><td>n (enter)</td><td>n    为数字。光标向下移动    n    列</td></tr><tr><td>/word</td><td>向光标之下寻找一个名称为    word    的字串。</td></tr><tr><td>?word</td><td>向光标之上寻找一个名称为    word    的字串。</td></tr><tr><td>n</td><td>这个    n    是英文按键。代表“<u>重复前一个搜寻的动作</u>”。举例来说,    如果刚刚我们执行    /vbird    去向下搜寻    vbird    这个字串,则按下n    后,会向下继续搜寻下一个名称为    vbird    的字串。如果是执行    ?vbird    的话,那么按下    n则会向上继续搜寻名称为    vbird    的字串!</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1与n2为数字。在第n1与    n2列之间寻找word1    这个字串,并将该字串取代为    word2!</td></tr><tr><td>:1,$s/word1/word2/g</td><td>在第一列到最后一列之间寻找word1    这个字串,并将该字串取代为    word2!</td></tr><tr><td>:1,$s/word1/word2/gc</td><td>在第一列到最后一列之间寻找word1    这个字串,并将该字串取代为    word2!替换时进行询问</td></tr><tr><td>x,    X</td><td>在一列字当中,x    为向后删除一个字符    (相当于    [del]    按键),    X    为向前删除一个字符(相当于    [backspace]    亦即是倒退键)</td></tr><tr><td>dd</td><td>删除光标所在的那一整列</td></tr><tr><td>ndd</td><td>n为数字。删除光标所在的向下n列,例如20dd则是删除20列</td></tr><tr><td>yy</td><td>复制光标所在的那一列</td></tr><tr><td>nyy</td><td>复制光标所在的向下n列 n为数字</td></tr><tr><td>p/P</td><td>在光标所在列之下/上粘贴</td></tr><tr><td>u</td><td>撤消前一个动作。</td></tr><tr><td>.</td><td>重复前一个动作。</td></tr></tbody></table><h5 id="进入编辑模式常用热键说明："><a href="#进入编辑模式常用热键说明：" class="headerlink" title="进入编辑模式常用热键说明："></a>进入编辑模式常用热键说明：</h5><table><thead><tr><th>热键</th><th>说明</th></tr></thead><tbody><tr><td>i,I</td><td>进入插入模式(Insert    mode):i为“从目前光标所在处插入”,    I为“在目前所在列的第一个非空白字符处开始插入”。</td></tr><tr><td>a,A</td><td>进入插入模式(Insert    mode):a为“从目前光标所在的下一个字符处开始插入”,    A    为“从光标所在列的最后一个字符处开始插入”。</td></tr><tr><td>o,O</td><td>进入插入模式(Insert    mode):这是英文字母    o    的大小写。o为“在目前光标所在的下一列处插入新的一列”;    O    为在目前光标所在处的上一列插入新的一列!</td></tr><tr><td>r,R</td><td>进入取代模式(Replacemode):r    只会取代光标所在的那一个字符一次;R会一直取代光标所在的文字,直到按下    ESC    为止;</td></tr></tbody></table><h5 id="命令模式常用指令说明："><a href="#命令模式常用指令说明：" class="headerlink" title="命令模式常用指令说明："></a>命令模式常用指令说明：</h5><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘文件中</td></tr><tr><td>:q</td><td>离开vi</td></tr><tr><td>:wq</td><td>储存后离开,若为    :wq!    则为强制储存后离开</td></tr><tr><td>:n1,n2    w    [filename]</td><td>将    n1    到    n2    的内容储存成    filename    这个文件。</td></tr><tr><td>:set    nu/:set    nonu</td><td>显示/取消行号</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本上    vi    共分为三种模式,分别是“一般指令模式”、“编辑模式”与“命令行命令模式”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般指令模式；&lt;br&gt;vi    打开一个文件就直接进入一般指令模式了(这是默认的模式,也简称为一般模式)。在这个模式中,&lt;br&gt;你可以使用“上下左右”按键来移动光标,你可以使用“删除字符”或“删除整列”来处理文件内容,    也可以使用“复制、贴上”来处理你的文件数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LINUX笔记4-Linux系统中常见的压缩指令</title>
    <link href="http://jekion.com/2017/06/10/linux_note_4/"/>
    <id>http://jekion.com/2017/06/10/linux_note_4/</id>
    <published>2017-06-10T12:25:26.000Z</published>
    <updated>2017-12-28T07:26:12.441Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux的环境中,压缩文件的扩展名大多是:<code>.tar,.tar.gz,.tgz,.gz,.Z,.bz2,    *.xz</code><br><a id="more"></a></p><blockquote><p><em>.Z                    compress    程序压缩的文件;</em>.zip                    zip    程序压缩的文件;<br><em>.gz                    gzip    程序压缩的文件;</em>.bz2                    bzip2    程序压缩的文件;<br><em>.xz                    xz    程序压缩的文件;</em>.tar                    tar    程序打包的数据,并没有压缩过;<br><em>.tar.gz            tar    程序打包的文件,其中并且经过    gzip    的压缩</em>.tar.bz2            tar    程序打包的文件,其中并且经过    bzip2    的压缩<br>*.tar.xz            tar    程序打包的文件,其中并且经过    xz    的压缩</p></blockquote><h5 id="gzip命令使用："><a href="#gzip命令使用：" class="headerlink" title="gzip命令使用："></a><code>gzip</code>命令使用：</h5><blockquote><p>dmtsai@study    ~]$    gzip    [-cdtv#]    文件名<br>选项与参数:<br>-c        :将压缩的数据输出到屏幕上,可通过数据流重导向来处理;<br>-d        :解压缩;<br>-t        :可以用来检验一个压缩文件的一致性~看看文件有无错误;<br>-v        :可以显示出原文件/压缩文件的压缩比等信息;<br>-#        :#    为数字的意思,代表压缩等级,-1    最快,但是压缩比最差、-9    最慢,但是压缩比最好!默认是    -6</p></blockquote><p>注意：当你使用    gzip    进行压缩时,在默认的状态下原本的文件会被压缩成为    .gz    的文件名,原始文件就不再存在了。    </p><p>要压缩保留原文件可以使用如下指令：<br><code>gzip -9 -c services &gt; services.gz</code></p><p><code>cat/more/less</code>可以使用不同的方式来读取纯文本文件,<br><code>zcat/zmore/zless</code>则可以对应于cat/more/less    的方式来读取纯文本文件被压缩后的压缩文件!<br>由于<code>gzip</code>这个压缩指令主要想要用来取代<code>compress</code>的,所以不但<code>compress</code>的压缩文件可以使用<code>gzip</code>来解开,同时<code>zcat</code>这个指令可以同时读取<code>compress</code>与    <code>gzip</code>的压缩文件呦!<br>另外,如果你还想要从文字压缩文件当中找数据的话,可以通过<code>egrep</code>来搜寻关键字喔!而<br>不需要将压缩文件解开才以<code>grep</code>进行!    这对查询备份中的文本文件数据相当有用!</p><h5 id="bzip2命令使用"><a href="#bzip2命令使用" class="headerlink" title="bzip2命令使用:"></a><code>bzip2</code>命令使用:</h5><p>若说<code>gzip</code>是为了取代<code>compress</code>并提供更好的压缩比而成立的,那么<code>bzip2</code>则是为了取代<code>gzip</code>并提供更佳的压缩比而来的。用法与<code>gzip</code>几乎相同。</p><blockquote><p>   [dmtsai@study    ~]$    bzip2    [-cdkzv#]    文件名<br>选项与参数:<br>-c        :将压缩的过程产生的数据输出到屏幕上!<br>-d        :解压缩的参数<br>-k        :保留原始文件,而不会删除原始的文件喔!<br>-z        :压缩的参数    (默认值,可以不加)<br>-v        :可以显示出原文件/压缩文件的压缩比等信息;<br>-#        :与    gzip    同样的,都是在计算压缩比的参数,    -9    最佳,    -1    最快!</p></blockquote><p>相对应的有：<code>bzcat/bzmore/bzless/bzgrep</code>命令对压缩文件进行显示与查找。</p><h5 id="xz命令使用："><a href="#xz命令使用：" class="headerlink" title="xz命令使用："></a><code>xz</code>命令使用：</h5><p>虽然<code>bzip2</code>已经具有很棒的压缩比,不过显然某些自由软件开发者还不满足,因此后来还推出了<code>xz</code>这个压缩比更高的软件!同样相对应的有：<code>xzcat/xzmore/xzless/xzgrep</code>命令对压缩文件进行显示与查找。</p><p>PS：这三个压缩指令的压缩比例一个比一个好，但所花的时候也成正比；我们可以通过：<code>time xz -c 文件 &gt; 文件.xz</code> 来观查所用时间。</p><h4 id="打包指令：tar"><a href="#打包指令：tar" class="headerlink" title="打包指令：tar"></a>打包指令：<code>tar</code></h4><p>虽然<code>gzip,bzip2,xz</code>    也能够针对目录来进行压缩,不过对目录的压缩指的是“将目录内的所有文件”分别”进行压缩”的动作!而不像在Windows的系统,可以使用类似    WinRAR这一类的压缩软件来将好多数据“包成一个文件”的样式。所以Linux下面对多个目录或文件打包，需要用到 <code>tar</code>指令。</p><blockquote><p>[dmtsai@study    ~]$    tar    [-z,-j,-J]    [cv]    [-f    待创建的新文件名]    filename…    &lt;==打包与压缩<br>[dmtsai@study    ~]$    tar    [-z,-j,-J]    [tv]    [-f    既有的    tar文件名]                                                    &lt;==察看文件名<br>[dmtsai@study    ~]$    tar    [-z,-j,-J]    [xv]    [-f    既有的    tar文件名]    [-C    目录]            &lt;==解压缩<br>选项与参数:<br>-c        :创建打包文件,可搭配    -v    来察看过程中被打包的文件名(filename)<br>-t        :察看打包文件的内容含有哪些文件名,重点在察看“文件名”就是了;<br>-x        :解打包或解压缩的功能,可以搭配    -C    (大写)    在特定目录解开<br>                        特别留意的是,    -c,    -t,    -x    不可同时出现在一串命令行中。<br>-z        :通过    gzip        的支持进行压缩/解压缩:此时文件名最好为    <em>.tar.gz<br>-j        :通过    bzip2    的支持进行压缩/解压缩:此时文件名最好为    </em>.tar.bz2<br>-J        :通过    xz                的支持进行压缩/解压缩:此时文件名最好为    *.tar.xz<br>                        特别留意,    -z,    -j,    -J    不可以同时出现在一串命令行中<br>-v        :在压缩/解压缩的过程中,将正在处理的文件名显示出来!<br>-f    filename:-f    后面要立刻接要被处理的文件名!建议    -f    单独写一个选项啰!(比较不会忘记)<br>-C    目录                :这个选项用在解压缩,若要在特定目录解压缩,可以使用这个选项。<br>其他后续练习会使用到的选项介绍:<br>-p(小写)    :保留备份数据的原本权限与属性,常用于备份(-c)重要的配置文件<br>-P(大写)    :保留绝对路径,亦即允许备份数据中含有根目录存在之意;<br>–exclude=FILE:在压缩的过程中,不要将    FILE    打包!</p></blockquote><p>常用：</p><ul><li><code>tar -j -cv -f xxx.tar.bz2 ./xxx</code>压缩打包<code>xxx</code> 目录; </li><li><code>tar -j -xv -f xxx.tar.bz2</code>解压缩打包文件; </li><li><code>tar -tv -f xxx.tar.bz2 ./xxx</code>查看打包文件;</li><li><code>tar -j xv -f xxx.tar.bz2 -C /tmp</code> 解压<code>xxx.tar.bz2</code> 至 <code>/tmp</code> </li></ul><h5 id="提取部分文件"><a href="#提取部分文件" class="headerlink" title="提取部分文件"></a>提取部分文件</h5><p>1、先搜索：<br><code>tar -j tf -f xxx.tar.bz2 | grep &#39;xxxx&#39;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux的环境中,压缩文件的扩展名大多是:&lt;code&gt;.tar,.tar.gz,.tgz,.gz,.Z,.bz2,    *.xz&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LINUX笔记3-磁盘的分区，格式化，挂载</title>
    <link href="http://jekion.com/2017/06/02/linux_note_3/"/>
    <id>http://jekion.com/2017/06/02/linux_note_3/</id>
    <published>2017-06-02T05:21:23.000Z</published>
    <updated>2017-12-28T07:28:19.143Z</updated>
    
    <content type="html"><![CDATA[<h5 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h5><blockquote><p>[root@study    ~]#    mount    -a<br>[root@study    ~]#    mount    [-l]<br>[root@study    ~]#    mount    [-t    文件系统]    LABEL=’’        挂载点<br>[root@study    ~]#    mount    [-t    文件系统]    UUID=’’            挂载点        #    鸟哥近期建议用这种方式喔!<br>[root@study    ~]#    mount    [-t    文件系统]    设备文件名        挂载点<br><a id="more"></a><br>选项与参数:<br>-a:依照配置文件    <code>/etc/fstab</code>的数据将所有未挂载的磁盘都挂载上来<br>-l:单纯的输入    mount    会显示目前挂载的信息。加上    -l    可增列    Label    名称!<br>-t:可以加上文件系统种类来指定欲挂载的类型。常见的    Linux    支持类型有:xfs,    ext3,    ext4,reiserfs,    vfat,    iso9660(光盘格式),    nfs,    cifs,    smbfs    (后三种为网络文件系统类型)<br>-n:在默认的情况下,系统会将实际挂载的情况实时写入    /etc/mtab    中,以利其他程序的运行。但在某些情况下(例如单人维护模式)为了避免问题会刻意不写入。此时就得要使用    -n    选项。<br>-o:后面可以接一些挂载时额外加上的参数!比方说帐号、密码、读写权限等:<br>async,    sync:此文件系统是否使用同步写入    (sync)    或非同步    (async)    的内存机制,请参考文件系统运行方式。默认为    async。<br>atime,noatime:    是否修订文件的读取时间(atime)。为了性能,某些时刻可使用    noatime<br>ro,    rw:        挂载文件系统成为只读(ro)    或可读写(rw)<br>auto,    noauto:        允许此    filesystem    被以    mount    -a    自动挂载(auto)<br>dev,    nodev:                是否允许此    filesystem    上,可创建设备文件?    dev    为可允许<br>suid,    nosuid:        是否允许此    filesystem    含有    suid/sgid    的文件格式?<br>exec,    noexec:        是否允许此    filesystem    上拥有可执行    binary    文件?<br>user,    nouser:        是否允许此    filesystem    让任何使用者执行    mount    ?一般来说,mount    仅有    root    可以进行,但下达    user    参数,则可让一般    user    也能够对此    partition    进行    mount    。</p></blockquote><p>defaults:默认值为:rw,    suid,    dev,    exec,    auto,    nouser,    and    async<br>remount:                            重新挂载,这在系统出错,或重新更新参数时,很有用!</p><h4 id="設置开机挂载"><a href="#設置开机挂载" class="headerlink" title="設置开机挂载"></a>設置开机挂载</h4><p>1,更更文件<code>/etc/fstab</code> </p><blockquote><p>UUID=e0fa7252-b374-4a06-987a-3cb14f415488  /data/mnt  default  0  0 </p></blockquote><p>2,查看要挂载设备是否已经挂载，若挂载将其缷载。</p><blockquote><p>df //查看当前已经挂载的设备<br>umount /dev/vda4  //缷载设备</p></blockquote><p>3,测试是否挂载成功</p><blockquote><p>mount -a</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;文件属性&quot;&gt;&lt;a href=&quot;#文件属性&quot; class=&quot;headerlink&quot; title=&quot;文件属性&quot;&gt;&lt;/a&gt;文件属性&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;[root@study    ~]#    mount    -a&lt;br&gt;[root@study    ~]#    mount    [-l]&lt;br&gt;[root@study    ~]#    mount    [-t    文件系统]    LABEL=’’        挂载点&lt;br&gt;[root@study    ~]#    mount    [-t    文件系统]    UUID=’’            挂载点        #    鸟哥近期建议用这种方式喔!&lt;br&gt;[root@study    ~]#    mount    [-t    文件系统]    设备文件名        挂载点&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LINUX笔记2-文件权限与目录</title>
    <link href="http://jekion.com/2017/05/17/linux_note_2/"/>
    <id>http://jekion.com/2017/05/17/linux_note_2/</id>
    <published>2017-05-17T03:20:20.000Z</published>
    <updated>2017-12-28T07:26:50.014Z</updated>
    
    <content type="html"><![CDATA[<h5 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h5><p>我们可以利用<code>ls -al</code>来查看文件或目录的属性；执行后如下图：<br><a id="more"></a><br><img src="https://github.com/jqy518/linux-note/raw/master/imgs/5_3.png" alt="img1"></p><h5 id="文件类型与权限详解："><a href="#文件类型与权限详解：" class="headerlink" title="文件类型与权限详解："></a>文件类型与权限详解：</h5><p><img src="https://github.com/jqy518/linux-note/raw/master/imgs/5_2.png" alt="img2"></p><ul><li><p>第一个字符代表这个文件是“目录、文件或链接文件等等”:</p><blockquote><p>当为[    d    ]则是目录,例如上表文件名为“.config”的那一行;<br>当为[    -    ]则是文件,例如上表文件名为“initial-setup-ks.cfg”那一行;<br>若是[    l    ]则表示为链接文件(link    file);<br>若是[    b    ]则表示为设备文件里面的可供储存的周边设备(可随机存取设备);<br>若是[    c    ]则表示为设备文件里面的序列埠设备,例如键盘、鼠标(一次性读取设<br>备)。</p></blockquote></li><li><p>接下来的字符中,以三个为一组,且均为“rwx”    的三个参数的组合。</p><blockquote><p>[    r    ]代表可读(read)、<br>[    w    ]代表可写(write)、<br>[    x    ]代表可执行(execute)。<br>要注意的是,这三个权限的位置不会改变,如果没有权限,就会出现减号[    -    ]而已。</p></blockquote></li></ul><h5 id="chgrp-chown-chmod指令使用："><a href="#chgrp-chown-chmod指令使用：" class="headerlink" title="chgrp,chown chmod指令使用："></a><code>chgrp,chown chmod</code>指令使用：</h5><ul><li><p>chgrp:</p><blockquote><p>chgrp -R    users    ./data   //改变DATA文件夹的用户组，<br>-R :    进行递回(recursive)的持续变更,亦即连同次目录下的所有文件、目录<br>都更新成为这个群组之意。常常用在变更某一目录内所有的文件之情况。</p></blockquote></li><li><p>chown:</p><blockquote><p>chown    [-R]    帐号名称    文件或目录<br>chown    [-R]    帐号名称:群组名称    文件或目录<br>选项与参数:<br>-R    :    进行递回(recursive)的持续变更,亦即连同次目录下的所有文件都变更</p></blockquote></li></ul><p>例如：</p><blockquote><p>chown    zhangsan initial-setup-ks.cfg<br>chown root:root initial-setup-ks.cfg //把用户及群组都改回root</p></blockquote><ul><li>chmod:<br>修改文件或文件夹的权限，有两种形式的修改：一种是数字型，一种是字符型运算。</li></ul><p>1,数字型：</p><p>Linux文件的基本权限就有九个,分别是owner/group/others三种身份各有自己的read/write/execute权限:如：<code>-rwxr-xr-x</code> 其中分值如下:</p><blockquote><p>r:4    &gt;    w:2    &gt;    x:1</p></blockquote><p>如：</p><blockquote><p>chmod -R 755 ./data<br>//-R :进行递回(recursive)的持续变更,亦即连同次目录下的所有文件都会变更</p></blockquote><p>2,字符型运算：<br>基本上就九个权限分别是<br>(1)user    (2)group    (3)others三种身份啦!<br>那么我们就可以借由<code>u,g,o</code>来代表三种身份的权限!此外,<code>a</code>则代表all亦即全部的身份!<br>那么读写的权限就可以写成<code>r,w,x</code>;</p><p>例如：</p><blockquote><p>chmod u=rwx,go=rx .bashrc // 改变权限为<code>-rwxr-xr-x</code></p></blockquote><h5 id="文件与目录的权限意义："><a href="#文件与目录的权限意义：" class="headerlink" title="文件与目录的权限意义："></a>文件与目录的权限意义：</h5><p>1,权限字符对文件的意义：</p><blockquote><p>r    (read):可读取此一文件的实际内容,如读取文本文件的文字内容等;<br>w    (write):可以编辑、新增或者是修改该文件的内容(但不含删除该文件);<br>x    (eXecute):该文件具有可以被系统执行的权限。</p></blockquote><p>2,权限字符对目录的意义：</p><blockquote><p>r:<br>表示具有读取目录结构清单的权限,所以当你具有读取(r)一个目录的权限时,表示你可以查询该目录下的文件名数据。    所以你就可以利用    ls    这个指令将该目录的内容列表显示出来!<br>w:<br>这个可写入的权限对目录来说,是很了不起的!    因为他表示你具有异动该目录结构清单的权限,也就是下面这些权限:<br>1)创建新的文件与目录;<br>2)删除已经存在的文件与目录(不论该文件的权限为何!)<br>3)将已存在的文件或目录进行更名;<br>4)搬移该目录内的文件、目录位置。<br>总之,目录的w权限就与该目录下面的文件名异动有关就对了啦!<br>x:<br>目录的x代表的是使用者能否进入该目录成为工作目录。（利用 <code>cd</code>进入目录作为工作目录）</p></blockquote><h5 id="Linux目录配置："><a href="#Linux目录配置：" class="headerlink" title="Linux目录配置："></a>Linux目录配置：</h5><p>为了便于管理系统内的应用及文件；我们尽量遵循FHS的标准；来放置我们的软件及文件；<br><img src="https://github.com/jqy518/linux-note/raw/master/imgs/5_4.png" alt="img2"><br>几个比较重要的目录介绍：</p><blockquote><p><code>/bin</code> ： 系统有很多放置可执行文件的目录,但/bin比较特殊。因为/bin放置的是在单人维护模式下还能够被操作的指令。    在/bin下面的指令可以被root与一般帐号所使用,主要有:cat,    chmod,    chown,    date,    mv,    mkdir,    cp,    bash等等常用的指令。<br><code>/boot</code> :这个目录主要在放置开机会使用到的文件,包括Linux核心文件以及开机菜单与开机所需配置文件等等。    Linux    kernel常用的文件名为:vmlinuz,如果使用的是grub2这个开机管理程序,    则还会存在/boot/grub2/这个目录喔!<br><code>/dev</code> :在Linux系统上,任何设备与周边设备都是以文件的型态存在于这个目录当中的。    你只要通过存取这个目录下面的某个文件,就等于存取某个设备啰~    比要重要的文件有/dev/null,    /dev/zero,    /dev/tty,    /dev/loop,    /dev/sd等等<br><code>/etc</code> :系统主要的配置文件几乎都放置在这个目录内,例如人员的帐号密码档、各种服务的启始档等等。一般来说,这个目录下的各文件属性是可以让一般使用者查阅的,    但是只有root有权力修改。FHS建议不要放置可可执行文件(binary)在这个目录中喔。比较重要的文件有:    /etc/modprobe.d/,/etc/passwd,    /etc/fstab,    /etc/issue    等等。另外    FHS    还规范几个重要的目录最好要存在    /etc/    目录下喔:/etc/opt(必要):这个目录在放置第三方协力软件    /opt    的相关配置文件    /etc/X11/(建议):与    X    Window    有关的各种配置文件都在这里,尤其是    xorg.conf    这个    X    Server    的配置文件。    /etc/sgml/(建议):与    SGML    格式有关的各项配置文件    /etc/xml/(建议):与    XML格式有关的各项配置文件<br><code>/opt</code>:这个是给第三方协力软件放置的目录。什么是第三方协力软件啊?    举例来<br>说,KDE这个桌面管理系统是一个独立的计划,不过他可以安装到Linux系统中,因此KDE的软件就建议放置到此目录下了。    另外,如果你想要自行安装额外的软件(非原本的distribution提供的),那么也能够将你的软件安装到这里来。    不过,以前的Linux系统中,我们还是习惯放置在/usr/local目录下呢!<br><code>/srv</code> :srv可以视为“service”的缩写,是一些网络服务启动之后,这些服务所需要<br>取用的数据目录。    常见的服务例如WWW,    FTP等等。举例来说,WWW服务器需要的网页数据就可以放置在/srv/www/里面。    不过,系统的服务数据如果尚未要提供给网际网络任何人浏览的话,默认还是建议放置到    /var/lib下面即可。<br><code>/usr,/var</code>: 第二层FHS设置;</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;文件属性&quot;&gt;&lt;a href=&quot;#文件属性&quot; class=&quot;headerlink&quot; title=&quot;文件属性&quot;&gt;&lt;/a&gt;文件属性&lt;/h5&gt;&lt;p&gt;我们可以利用&lt;code&gt;ls -al&lt;/code&gt;来查看文件或目录的属性；执行后如下图：&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LINUX笔记1-常用指令使用</title>
    <link href="http://jekion.com/2017/05/15/linux_note_1/"/>
    <id>http://jekion.com/2017/05/15/linux_note_1/</id>
    <published>2017-05-15T07:20:20.000Z</published>
    <updated>2017-12-28T07:25:23.532Z</updated>
    
    <content type="html"><![CDATA[<h5 id="nano文本编辑器使用。"><a href="#nano文本编辑器使用。" class="headerlink" title="nano文本编辑器使用。"></a><code>nano</code>文本编辑器使用。</h5><blockquote><p>nano 11.txt<br>如果<code>11.txt</code>存在则打开，如果不存在则为新文件;<br><a id="more"></a><br><img src="https://github.com/jqy518/linux-note/raw/master/imgs/3_1.png" alt="nano"></p></blockquote><h5 id="代表Ctrl-M-代表alt"><a href="#代表Ctrl-M-代表alt" class="headerlink" title="^代表Ctrl;  M-代表alt"></a><code>^</code>代表<code>Ctrl</code>;  <code>M-</code>代表<code>alt</code></h5><h4 id="常用的关机命令："><a href="#常用的关机命令：" class="headerlink" title="常用的关机命令："></a>常用的关机命令：</h4><blockquote><p>将数据同步写入硬盘中的指令:    sync<br>惯用的关机指令:    shutdown<br>重新开机,关机:    reboot,    halt,    poweroff</p></blockquote><h4 id="cp-rm-mv-指令"><a href="#cp-rm-mv-指令" class="headerlink" title="cp,rm,mv 指令"></a>cp,rm,mv 指令</h4><ul><li><code>cp</code>指令：<blockquote><p>[root@study    ~]#    cp    [-adfilprsu]    来源文件(source)    目标文件(destination)<br>[root@study    ~]#    cp    [options]    source1    source2    source3    ….    directory<br>选项与参数:<br>-a ：相当于    -dr    –preserve=all    的意思,至于    dr    请参考下列说明;(常用)<br>-d ：若来源文件为链接文件的属性(link    file),则复制链接文件属性而非文件本身;<br>-f ：为强制(force)的意思,若目标文件已经存在且无法打开,则移除后再尝试一次;<br>-i ：若目标文件(destination)已经存在时,在覆盖时会先询问动作的进行(常用)<br>-l ：进行硬式链接(hard    link)的链接文件创建,而非复制文件本身;<br>-p ：连同文件的属性(权限、用户、时间)一起复制过去,而非使用默认属性(备份常用);<br>-r ：递回持续复制,用于目录的复制行为;(常用)<br>-s ：复制成为符号链接文件    (symbolic    link),亦即“捷径”文件;<br>-u ：destination    比    source    旧才更新    destination,或    destination    不存在的情况下才复制。<br>–preserve=all    :除了    -p    的权限相关参数外,还加入    SELinux    的属性,    links,    xattr    等也复制了。<br>最后需要注意的,如果来源文件有两个以上,则最后一个目的文件一定要是“目录”才行!</p></blockquote></li></ul><p>常用练习：</p><blockquote><p><code>cp /usr/src/bb.txt  ./ff.txt</code>  //复制 bb.txt并改名ff.txt<br><code>cp -r /usr/src /tmp</code> //复制目录到<code>/tmp</code><br><code>cp -r /usr/src/* /tmp/cpsrc</code> 复制目录/usr/src下的文件及目录到/tmp/cpsrc<br><code>cp -l ./rar/readme.txt ./readme_l.txt</code> 创建实体连接<br><code>cp -s ./rar/readme.txt ./readme_s.txt</code> 创建符号连接<br><code>cp -a /usr /bkusr</code> 备份/usr（保留相关属性,ps:由于普通用户身份并不能随意修改文件的拥有者与群组,因此虽然能够复制的相关权限与时间等属性,    但是与拥有者、群组相关的,普通用户身份无法进行的动作,即使加上    -a    选项,也是无法达成完整复制权限的!所以备份最好用<code>root</code>用户）</p></blockquote><ul><li>rm指令：<blockquote><p>选项与参数:<br>-f :就是    force    的意思,忽略不存在的文件,不会出现警告讯息;<br>-i :互动模式,在删除前会询问使用者是否动作<br>-r :递回删除啊!最常用在目录的删除了!这是非常危险的选项!!!</p></blockquote></li></ul><p>常用练习：</p><blockquote><p>rm -i aa.txt   //删除前询问<br>rm -r ./cc //删除目录<br>rm  ./-aa- 删除以‘-’开头的文件</p></blockquote><p>ps:<code>root</code>用户因身份特殊默认带有<code>-i</code>参数</p><ul><li>mv指令：</li></ul><blockquote><p>-f :force    强制的意思,如果目标文件已经存在,不会询问而直接覆盖;<br>-i :若目标文件    (destination)    已经存在时,就会询问是否覆盖!<br>-u :若目标文件已经存在,且    source    比较新,才会更新    (update)</p></blockquote><p>常用练习：</p><blockquote><p>mv aa.txt ./back   //将文件aa.txt移动到back文件中<br>mv aa.txt cc.txt //更改文件名称<br>mv ./back ./backup //更改文件夹名称。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;nano文本编辑器使用。&quot;&gt;&lt;a href=&quot;#nano文本编辑器使用。&quot; class=&quot;headerlink&quot; title=&quot;nano文本编辑器使用。&quot;&gt;&lt;/a&gt;&lt;code&gt;nano&lt;/code&gt;文本编辑器使用。&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;nano 11.txt&lt;br&gt;如果&lt;code&gt;11.txt&lt;/code&gt;存在则打开，如果不存在则为新文件;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux下使用supervisor后台运行你的应用</title>
    <link href="http://jekion.com/2017/05/03/supervisor/"/>
    <id>http://jekion.com/2017/05/03/supervisor/</id>
    <published>2017-05-03T02:10:59.000Z</published>
    <updated>2017-05-03T02:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>redis</code>Supervisor是一个进程管理工具，当我们有应用需要以后台服务方式跑起来时，我们可以利用它进行管理。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1) 利用<code>easy_install</code>安装</p><blockquote><p>easy_install supervisor<br>2) 也可以下载后手动安装<br><a href="https://pypi.python.org/pypi/supervisor/3.3.1" target="_blank" rel="noopener">supervisor-3.3.1.tar.gz</a><br>然后解压<code>tar xvf supervisor-3.3.1.tar.gz</code>进入根目录运行以下命令进行安装<br>python setup.py install </p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>1)生成配置文件,我们可以运行以下命令在相应目录下生成配置文件<br>echo_supervisord_conf &gt; /etc/supervisord.conf<br>进行以下配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=<span class="regexp">/tmp/</span>supervisor.sock ; UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=<span class="number">0700</span> ; socket 文件的 mode，默认是 <span class="number">0700</span></span><br><span class="line">;chown=nobody:nogroup ; socket 文件的 owner，格式： uid:gid</span><br><span class="line"></span><br><span class="line">;[inet_http_server] ; HTTP 服务器，提供 web 管理界面</span><br><span class="line">;port=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9001</span> ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user ; 登录管理后台的用户名</span><br><span class="line">;password=<span class="number">123</span> ; 登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=<span class="regexp">/tmp/</span>supervisord.log ; 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=<span class="number">50</span>MB ; 日志文件大小，超出会 rotate，默认 <span class="number">50</span>MB</span><br><span class="line">logfile_backups=<span class="number">10</span> ; 日志文件保留备份数量默认 <span class="number">10</span></span><br><span class="line">loglevel=info ; 日志级别，默认 info，其它: debug,warn,trace</span><br><span class="line">pidfile=<span class="regexp">/tmp/</span>supervisord.pid ; pid 文件</span><br><span class="line">nodaemon=<span class="literal">false</span> ; 是否在前台启动，默认是 <span class="literal">false</span>，即以 daemon 的方式启动</span><br><span class="line">minfds=<span class="number">1024</span> ; 可以打开的文件描述符的最小值，默认 <span class="number">1024</span></span><br><span class="line">minprocs=<span class="number">200</span> ; 可以打开的进程数的最小值，默认 <span class="number">200</span></span><br><span class="line"></span><br><span class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:<span class="comment">///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span></span><br><span class="line">;serverurl=http:<span class="comment">//127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</span></span><br><span class="line"></span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = <span class="regexp">/etc/</span>supervisor<span class="comment">/*.conf ; 可以是 *.conf 或 *.ini</span></span><br></pre></td></tr></table></figure></p></blockquote><p>推荐将各个进程配置放到单独的文件中，然后通过[include]配置项引用；如上面配置最后一句，开启扫描的目录；以相应配置文件；</p><p>进程program配置，我们可以做为单独配置放在上面的包含路径下面.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[program:usercenter]</span><br><span class="line">directory = <span class="regexp">/home/</span>leon/projects/usercenter ; 程序的启动目录</span><br><span class="line">command = gunicorn -c gunicorn.py wsgi:app ; 启动命令，可以看出与手动在命令行启动的命令是一样的</span><br><span class="line">autostart = <span class="literal">true</span> ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = <span class="number">5</span> ; 启动 <span class="number">5</span> 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = <span class="literal">true</span> ; 程序异常退出后自动重启</span><br><span class="line">startretries = <span class="number">3</span> ; 启动失败自动重试次数，默认是 <span class="number">3</span></span><br><span class="line">user = leon ; 用哪个用户启动</span><br><span class="line">redirect_stderr = <span class="literal">true</span> ; 把 stderr 重定向到 stdout，默认 <span class="literal">false</span></span><br><span class="line">stdout_logfile_maxbytes = <span class="number">20</span>MB ; stdout 日志文件大小，默认 <span class="number">50</span>MB</span><br><span class="line">stdout_logfile_backups = <span class="number">20</span> ; stdout 日志文件备份数</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile = <span class="regexp">/data/</span>logs/usercenter_stdout.log</span><br><span class="line"></span><br><span class="line">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class="line">; environment=PYTHONPATH=$PYTHONPATH:<span class="regexp">/path/</span>to/somewhere</span><br></pre></td></tr></table></figure></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><blockquote><p>supervisord -c supervisord.conf</p></blockquote><h4 id="配置需要后台启动的应用"><a href="#配置需要后台启动的应用" class="headerlink" title="配置需要后台启动的应用"></a>配置需要后台启动的应用</h4><p>如：<code>mongodb</code>,<code>express</code>web应用等我们都可以通过supervisor进行管理；作为后台运行；我们以mongodb为例；看下他的config文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[program:mongodb]</span><br><span class="line"></span><br><span class="line">command=<span class="regexp">/usr/</span>local/mongodb/bin/mongod -f /usr/local/mongodb/config.conf</span><br><span class="line"></span><br><span class="line">directory=<span class="regexp">/usr/</span>local/mongodb/bin/</span><br><span class="line"></span><br><span class="line">autorestart=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>保存上面配置作为一个文件<code>mongodb.conf</code>保存到我们的<code>include</code>文件夹下。再运行以下命令启动即可：</p><blockquote><p>supervisorctl start mongodb </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;redis&lt;/code&gt;Supervisor是一个进程管理工具，当我们有应用需要以后台服务方式跑起来时，我们可以利用它进行管理。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://jekion.com/tags/linux/"/>
    
      <category term="supervisor" scheme="http://jekion.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>nodejs中使用Redis</title>
    <link href="http://jekion.com/2017/04/26/node_redis/"/>
    <id>http://jekion.com/2017/04/26/node_redis/</id>
    <published>2017-04-26T10:10:59.000Z</published>
    <updated>2017-04-26T02:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>redis</code>作为后端开发中常用缓存工具，相信大家对它应该不会陌生；那么nodejs中是不是也能使用redis呢，答案是肯定的，接下来<br>带大家熟习下node模块<code>redis</code>的使用；<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="window下安装redis服务"><a href="#window下安装redis服务" class="headerlink" title="window下安装redis服务"></a>window下安装redis服务</h4><p>在安装模块之前，先得保证我们本地或都远程有安装redis；目前redis在linux下相对友好,安装起来也较window简单,window只支持64位系统。下面是版本的下载地址<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a>;<br>我下载的是免安装版的解压后可以看到以下目录结构：<br><img src="/img/redis.jpg" alt="redis"><br>我们在当前目录的<code>cmd</code>窗口下执行以下命令开启redis服务</p><blockquote><p>—注册服务<br>  redis-server –service-install redis.windows.conf –loglevel verbose<br>  —开启服务<br>  redis-server –service-start<br>开启服务后我们可以运行<code>redis-cli.exe</code>客户端进行测试。</p></blockquote><h4 id="redis模块安装"><a href="#redis模块安装" class="headerlink" title="redis模块安装"></a>redis模块安装</h4><p>nodejs中redis模块安装使用很简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redis --save</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">"redis"</span>),</span><br><span class="line">    client = redis.createClient([options]);</span><br></pre></td></tr></table></figure></p><p><code>options</code>是一个可以客户连接进行配置的Object对象；相应的属性我们可以参数redis的api文档：<br><a href="https://www.npmjs.com/package/redis" target="_blank" rel="noopener">redis模块使用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;redis&lt;/code&gt;作为后端开发中常用缓存工具，相信大家对它应该不会陌生；那么nodejs中是不是也能使用redis呢，答案是肯定的，接下来&lt;br&gt;带大家熟习下node模块&lt;code&gt;redis&lt;/code&gt;的使用；&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://jekion.com/tags/node/"/>
    
      <category term="redis" scheme="http://jekion.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用RegExp对象test(),exec()方法时注意&#39;g&#39;标志</title>
    <link href="http://jekion.com/2017/04/15/regexp/"/>
    <id>http://jekion.com/2017/04/15/regexp/</id>
    <published>2017-04-15T07:16:22.000Z</published>
    <updated>2017-12-28T06:45:22.299Z</updated>
    
    <content type="html"><![CDATA[<p>正则对象或字面量在加了’g’标志，进行全局匹配时，要注意test(),与exec()方法会更新RegExp.lastIndex的值。<br><a id="more"></a></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>当正则表达式使用 “g” 标志时，多次执行 exec()/test()来查找或检查同一个字符串时。下次操作将从正则表达式的  lastIndex 属性指定的位置开始；而exec()/test()方法会更新<code>RegExp.lastIndex</code>属性，换句话说，下次匹配会跳过之前已经匹配过的字符；当<code>lastIndex</code>为到了字符串末尾时，<br>lastIndex重置为0;如下代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;/g</span>;</span><br><span class="line"><span class="keyword">let</span> val = <span class="string">'13088889999'</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: true 11</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: false 0</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: true 11</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: false 0</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: true 11</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: false 0</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(value),regex.lastIndex); <span class="comment">//out: true 11</span></span><br></pre></td></tr></table></figure></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>所以在没有必要的情况下，使用上面两个方法我们最好不要用‘g’标志。这样每次结果都不一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则对象或字面量在加了’g’标志，进行全局匹配时，要注意test(),与exec()方法会更新RegExp.lastIndex的值。&lt;br&gt;
    
    </summary>
    
    
      <category term="RegExp" scheme="http://jekion.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>Generator函数笔记</title>
    <link href="http://jekion.com/2017/03/26/generator%20-%20todo/"/>
    <id>http://jekion.com/2017/03/26/generator - todo/</id>
    <published>2017-03-26T05:10:59.000Z</published>
    <updated>2017-07-13T08:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。<br><a id="more"></a></p><h3 id="yield表达式注意问题："><a href="#yield表达式注意问题：" class="headerlink" title="yield表达式注意问题："></a>yield表达式注意问题：</h3><p>1）<code>yield</code>表达式只有当调用<code>next</code>方法，内部指针指向该语句时才会执行；如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">funtion* gen()&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">111</span>+<span class="number">111</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>111+111</code>,不会立即求值，只会在next方法将指针移到这一句时，才会求值。<br>2）与<code>return</code>的区别<br>yield表达式只能存在Generator函数中可以多次，<code>return</code>任何函数中都可以；只能出现一次，return处在Generator中，与处在其他<br>函数中一样会中止generator函数执行; return 后面表达式的值做为<code>next()</code>的返回对象的<code>value</code>,<code>done</code>属性为true；</p><p>3）yield表达式用在另一表达式中，必须放在圆括号里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>+<span class="keyword">yield</span> <span class="number">123</span>); <span class="comment">//SyntaxError</span></span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">3</span> * <span class="keyword">yield</span> <span class="number">1</span> <span class="comment">//SyntaxError</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>+(<span class="keyword">yield</span> <span class="number">123</span>)); <span class="comment">//ok</span></span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">3</span> * (<span class="keyword">yield</span> <span class="number">1</span>) <span class="comment">//ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="for-…of循环。"><a href="#for-…of循环。" class="headerlink" title="for …of循环。"></a>for …of循环。</h3><p>for…of循环可以自动遍历 Generator 函数时生成的Iterator对象；不需要调用next方法；<br>值的注意的是：</p><blockquote><p>一旦next方法的返回对象的done属性为true，for…of<br>循环就会中止，且不包含该返回对象，所以下面代码的return语句返回的6，不包括在for…of循环之中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></p></blockquote><p>不仅<code>for...of</code>，扩展运算符<code>...</code>，Array.form()操作Iterator对象一样。</p><blockquote><p>for …of 可以遍历一切具有<code>Symbol.iterator</code>属性的对象，如<code>Array</code>,<code>Set</code>,’Map’;对于普通Object对象我们可以扩展<code>Symbol.iterator</code>属性达到可遍历的目的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">'zhangsan'</span>,</span><br><span class="line">  age:<span class="string">'12'</span></span><br><span class="line">&#125;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> keys)&#123;</span><br><span class="line">    <span class="keyword">yield</span> [key,<span class="keyword">this</span>[key]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'bbbb'</span>,<span class="string">'cccreturn'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,v] <span class="keyword">of</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key+<span class="string">":"</span>+v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gfun = obj[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,v] <span class="keyword">of</span> gfun)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw();"></a>Generator.prototype.throw();</h3><p>1）Generator 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。<br>如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(内部捕获：,e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iobj = gen();</span><br><span class="line">iobj.next() <span class="comment">//2</span></span><br><span class="line">iobj.throw(<span class="string">'b'</span>) <span class="comment">//内部捕获：b</span></span><br><span class="line">iobj.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure></p><p>内部捕获后，再遍历结束，调next()返回<code>{value:undefined,done:true}</code>如果内部没有部署<code>try...catch</code>(或内部部署了，但多次调用throw()除第一次内部捕获)则异常会抛到函数外部，外部可以捕获：<br>如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iobj = gen();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  iobj.next() <span class="comment">//2</span></span><br><span class="line">  iobj.throw(<span class="string">'b'</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(外部捕获：,e);  <span class="comment">//内部捕获：b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iobj.next() <span class="comment">//返回&#123;value:undefined,done:true&#125; 不会报错。</span></span><br></pre></td></tr></table></figure></p><p>如果内部外部都没有部署<code>try...catch</code> 则导致程序报错，中断执行。</p><p>2）Generator 函数体内抛出的错误，也可以被函数体外的catch捕获。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> y = x.toUpperCase();</span><br><span class="line">  <span class="keyword">yield</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = foo();</span><br><span class="line"></span><br><span class="line">it.next(); <span class="comment">// &#123; value:3, done:false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  it.next(<span class="number">42</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。&lt;br&gt;
    
    </summary>
    
    
      <category term="generator" scheme="http://jekion.com/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>Cannot read property &#39;EventSource&#39; of undefined</title>
    <link href="http://jekion.com/2017/03/15/eventsource/"/>
    <id>http://jekion.com/2017/03/15/eventsource/</id>
    <published>2017-03-15T05:10:59.000Z</published>
    <updated>2017-05-05T06:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>webpack</code>热加载，再加入<code>babel</code>加载器之后，莫明报了这个错<code>Cannot read property &#39;EventSource&#39; of undefined</code>;<br>这个坑浪费了我一个上午时间去填…<br><a id="more"></a></p><h3 id="引发原因"><a href="#引发原因" class="headerlink" title="引发原因"></a>引发原因</h3><p>配置在加入<code>babel</code>之前是好的，加入之后控制台就报上面的错，配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>花费这么长时间排查的主要原因是在加入babel之后又进行了一系列的其他配置才发现热加载出现问题（一直没有关注控制台，因为编译一切正常）;让我一下子摸不到头脑。以为代码哪里写错，怎么也没有让我怀疑到是这个加载器有问题（什么问题后面讲）；花了很时间比较撤销也没有找到原因，<code>google</code>发现也有朋友出现类似问题，其中有一个描述是由加载器导致出错，回头看我的加载器配置只有一个<code>babel</code>推测是不是它，是不是因为没有加<code>include</code>加限止，导致他干扰了<code>eventsource-polyfill</code>模块？</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>果断加上<code>include</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  include:[path.resolve(__dirname,<span class="string">"../src"</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;热加载，再加入&lt;code&gt;babel&lt;/code&gt;加载器之后，莫明报了这个错&lt;code&gt;Cannot read property &amp;#39;EventSource&amp;#39; of undefined&lt;/code&gt;;&lt;br&gt;这个坑浪费了我一个上午时间去填…&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://jekion.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>左侧宽度固定，右侧宽度自适应布局CSS怎么实现</title>
    <link href="http://jekion.com/2017/01/08/css_flex_auto/"/>
    <id>http://jekion.com/2017/01/08/css_flex_auto/</id>
    <published>2017-01-08T15:10:59.000Z</published>
    <updated>2017-02-14T08:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天同事问我左侧宽度固定，右侧宽度自适应布局CSS怎么实现，我首先想到是<code>flex</code>布局；但又隐约感觉还有其他方法，并且应该不止一两种。不敢确定（有点慌）；于是赶紧写几个DEMO实现一下；下面是目前想出的三种方式，应该还有，有了解的伙伴欢迎留言交流：</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">float</span>:left; <span class="attribute">background</span>: green;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:red; <span class="attribute">margin-left</span>:<span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-inner"</span>&gt;</span>asdfasfadfasdfsadfsaf ss ssa aad asdf aasd aaa <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-left"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>右边。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">300px</span>;&#125;</span><br><span class="line"><span class="selector-class">.wrap-left</span>&#123; <span class="attribute">width</span>: <span class="number">300px</span>; <span class="attribute">float</span>: left; <span class="attribute">height</span>: <span class="number">300px</span>; <span class="attribute">background</span>: <span class="number">#eee</span>; <span class="attribute">margin-right</span>:-<span class="number">300px</span>; <span class="attribute">z-index</span>: <span class="number">20</span>; &#125;</span><br><span class="line"><span class="selector-class">.wrap-right</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">300px</span>; <span class="attribute">float</span>: right; <span class="attribute">background</span>: <span class="number">#ccc</span>;&#125;</span><br><span class="line"><span class="selector-class">.right-inner</span>&#123; <span class="attribute">margin-left</span>:<span class="number">300px</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-warp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-warp</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">300px</span>; <span class="attribute">display</span>: flex;<span class="attribute">display</span>: -webkit-flex;&#125;</span><br><span class="line"><span class="selector-class">.flex-left</span>&#123;<span class="attribute">min-width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">300px</span>; <span class="attribute">background</span>:green;&#125;</span><br><span class="line"><span class="selector-class">.flex-right</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">300px</span>; <span class="attribute">background</span>:red;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天同事问我左侧宽度固定，右侧宽度自适应布局CSS怎么实现，我首先想到是&lt;code&gt;flex&lt;/code&gt;布局；但又隐约感觉还有其他方法，并且应该不止一两种。不敢确定（有点慌）；于是赶紧写几个DEMO实现一下；下面是目前想出的三种方式，应该还有，有了解的伙伴欢迎留言交流：&lt;
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://jekion.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用笔记二：常用用加载器配置</title>
    <link href="http://jekion.com/2016/12/16/webpack_2/"/>
    <id>http://jekion.com/2016/12/16/webpack_2/</id>
    <published>2016-12-16T14:10:59.000Z</published>
    <updated>2016-12-26T05:21:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>webpack</code>加载器是<code>webpack</code>的核心，有了加载器我们就可以进行各类的预处理如<code>less</code>,’vue’,图片及文字等；网上很少有对常用加载器的讲解；下面我罗列了一些常用加载器的作用及配置方法；<br><a id="more"></a></p><blockquote><p>注意：以下处加载器的参数配置没细讲，想了解决更多方法很简单到’npm’搜索想关加载器,各加载器参数配置讲解的很细；</p></blockquote><h3 id="css-sass-less文件加载器"><a href="#css-sass-less文件加载器" class="headerlink" title="css,sass,less文件加载器"></a>css,sass,less文件加载器</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">loaders:[</span><br><span class="line">    &#123;</span><br><span class="line">      test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: <span class="string">"style-loader!css-loader"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">      loaders:[<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>,<span class="string">"sass-loader"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test:<span class="regexp">/\.less$/</span>,</span><br><span class="line">      loaders:[<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>,<span class="string">"less-loader"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>上面用到的加载器有<code>style-loader</code>,<code>css-loader</code>,<code>less-loader</code>,<code>sass-loader</code>;<br>style-loader作用是把样式直接通过<code>&lt;style&gt;</code>标签插入到页面中。其他只个用于处理相关文件；这里要注意的是<code>sass-loader</code>依赖于<code>node-sass</code>所以我们实际安装的加载器为五个；<br>安装：<br><code>npm install style-laoder css-loader less-loader sass-loader --save-dev</code></p><h3 id="图片及文字加载器"><a href="#图片及文字加载器" class="headerlink" title="图片及文字加载器"></a>图片及文字加载器</h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">loaders:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      query: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: <span class="string">'img/[name].[hash:7].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      query: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: <span class="string">'fonts/[name].[hash:7].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>用到的加载器<code>url-loader</code>；作用把大小在’limit’以下的url文件转为<code>data url</code>;减少请求次数；上面临界是<code>10KB</code>;<br>name值为10KB以上的图片及字体资源<code>build</code>之后存放的目录之文件名；目录相对输出的绝对路径；<code>[name]</code>配置原文件名称；[hash:7]7位的hash值；[ext]原后缀名；</p><h4 id="ES6转ES5-babel-loader加载器"><a href="#ES6转ES5-babel-loader加载器" class="headerlink" title="ES6转ES5 babel-loader加载器"></a>ES6转ES5 babel-loader加载器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loaders:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      loader: <span class="string">'babel-loader?presets[]=es2015'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>安装：<code>npm install babel-loader babel-core babel-preset-es2015 --save-dev</code><br><code>babel-loader</code>用于把ES6语法转ES5，以便让目前的浏览器支持。这样我们就可以使用一些ES6特性开方便及加快我们的开发。</p><h4 id="代码校验eslint-loader加载器"><a href="#代码校验eslint-loader加载器" class="headerlink" title="代码校验eslint-loader加载器"></a>代码校验eslint-loader加载器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置加载器(webpack2.1.0后移除了，使用：[enforce: "pre"])</span></span><br><span class="line">preLoaders: [</span><br><span class="line">  &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">"eslint-loader"</span>,<span class="attr">include</span>:APP_PATH, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大家注意到我们把这个加载器放在<code>preLoaders</code>里面，而不是<code>loaders</code>里面；因为<code>eslint-loader</code>作用是校验我们的代码；让开发团队的代码更规范及标准；所以使用其他加载器之前我们很用它来对代码进行校验；<br>对于<code>eslint-loader</code>的校验规则我们可以以文件的形式进行配置具体操作方法如下：<br>1,在项目根目录下新建文件<code>.eslintrc</code>；内容如下（支持<code>json</code>,’YAML’两种格式）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="string">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//详细配置：http://eslint.org/docs/user-guide/configuring</span></span><br><span class="line">  <span class="string">"parserOptions"</span>:&#123;</span><br><span class="line">    <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,<span class="comment">//ecma版本</span></span><br><span class="line">     <span class="string">"sourceType"</span>: <span class="string">"module"</span>,<span class="comment">//模块化代码风格</span></span><br><span class="line">     <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">        <span class="comment">//是否支持实验阶段的语法</span></span><br><span class="line">      <span class="string">"experimentalObjectRestSpread"</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="comment">//使用‘airbnb’的校验规则//详情配置：https://www.npmjs.com/package/eslint-config-airbnb</span></span><br><span class="line">  <span class="comment">//"extends": "eslint:recommended",</span></span><br><span class="line">  <span class="comment">//个性化配置，详细配置：http://eslint.org/docs/rules/  </span></span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>parserOptions</code>可配置支持的ECMA版本等;<br><code>extends</code>配置,可用于继承相关校验规则,(eslint-loader规则有很多项，完全自己写有点浪费时间，我们可以承继一些公开的很成熟的第三方公司提供的规则)；然后再在<code>rules</code>中个性化自己的规则；<br>其他配置可以参考官网：<code>http://eslint.org/docs/user-guide/configuring</code><br>2,在webpack配置中加入<code>eslint</code>全局配置属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eslint: &#123;</span><br><span class="line">  formatter: <span class="built_in">require</span>(<span class="string">"eslint-friendly-formatter"</span>),<span class="comment">//信息格式化采用‘eslint-friendly-formatter’模块</span></span><br><span class="line">  configFile: <span class="string">'./.eslintrc'</span>,<span class="comment">//配置文件,在根目录下不用写//eslintrc可以定义多个以最近的为准参考：http://eslint.org/docs/user-guide/configuring#configuration-file-formats</span></span><br><span class="line">  failOnWarning: <span class="literal">true</span>, <span class="comment">// eslint报warning了就终止webpack编译</span></span><br><span class="line">  failOnError: <span class="literal">true</span>, <span class="comment">// eslint报error了就终止webpack编译</span></span><br><span class="line">  <span class="comment">//cache: true, // 开启eslint的cache，cache存在node_modules/.cache目录里;注意：缓存之后修改eslintrc无效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;加载器是&lt;code&gt;webpack&lt;/code&gt;的核心，有了加载器我们就可以进行各类的预处理如&lt;code&gt;less&lt;/code&gt;,’vue’,图片及文字等；网上很少有对常用加载器的讲解；下面我罗列了一些常用加载器的作用及配置方法；&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://jekion.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用笔记一：命令与配置</title>
    <link href="http://jekion.com/2016/12/08/webpack/"/>
    <id>http://jekion.com/2016/12/08/webpack/</id>
    <published>2016-12-08T00:10:59.000Z</published>
    <updated>2016-12-26T01:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>webpack</code>最近特别火，只是项目中暂时还没有使用，最近花了点时间学习了下；以备不时之需；<br><a id="more"></a></p><h3 id="webpack-cli常用命令"><a href="#webpack-cli常用命令" class="headerlink" title="webpack-cli常用命令"></a>webpack-cli常用命令</h3>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack #最基本的启动webpack命令</span><br><span class="line">webpack -w #提供watch方法，实时进行打包更新</span><br><span class="line">webpack -p #对打包后的文件进行压缩</span><br><span class="line">webpack -d #提供SourceMaps，方便调试</span><br><span class="line">webpack --colors #输出结果带彩色，比如：会用红色显示耗时较长的步骤</span><br><span class="line">webpack --profile #输出性能数据，可以看到每一步的耗时</span><br><span class="line">webpack --display-modules #默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</span><br></pre></td></tr></table></figure><h3 id="常用webpack-config讲解；"><a href="#常用webpack-config讲解；" class="headerlink" title="常用webpack.config讲解；"></a>常用webpack.config讲解；</h3><p>下面讲解的config配置项可以说比较全面，插件及加载器不会深入；如果感兴趣可以到<code>npm</code>上查找相关插件及加载器用法及配置都很全面.建议大家也不需要深入去熟记;只需要记住各插件的作用就行.<br>如果大家留意的话不难发现其实config文件也是一<code>node</code>模块；输出一对象；配置项也正是此对象的属性；</p><h5 id="entry入口"><a href="#entry入口" class="headerlink" title="entry入口"></a>entry入口</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">"./entry"</span>,</span><br><span class="line">entry:[<span class="string">"./module1.js"</span>,<span class="string">"./module2.js"</span>],</span><br><span class="line">entry:&#123;</span><br><span class="line">    app:path.resolve(APP_PATH,<span class="string">"index.js"</span>),<span class="comment">//'app'作为输出文件名</span></span><br><span class="line">    vendor: [<span class="string">'jquery'</span>] <span class="comment">//第三方库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entry写法如上述代码；有三种形式，<code>string</code>,’array’,’object’;前两种打包成一个文件，后一种可用于打包成多个文件，其实<code>key</code>值可以在后续输出中作为[name];</p><h5 id="output输出"><a href="#output输出" class="headerlink" title="output输出"></a>output输出</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">  path:BUILD_PATH,</span><br><span class="line">  <span class="comment">//文件名常用可选[name],[hash],[id],[contenthash]</span></span><br><span class="line">  filename:<span class="string">"js/[name].js"</span>,</span><br><span class="line">  <span class="comment">//访问资源的url路径</span></span><br><span class="line">  publicPath:<span class="string">'/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>path</code>参数表示生成文件的根目录，需要传入一个<code>绝对路径</code>。</p><blockquote><p>因为是node模块所以可以利用node的<code>path</code>模块来处理路径；上述代码的<code>BUILD_PATH</code>变量我们可以这样定义：<br>require(‘path’);<br>var BUILD_PATH = path.resolve(__dirname, ‘./build’);</p></blockquote><p><code>publicPath</code>参数表示的是一个URL路径（指向生成文件的根目录），用于生成css/js/图片/字体文件等资源的路径，以确保网页能正确地加载到这些资源。<br><code>filename</code>属性表示的是如何命名生成出来的入口文件,规则如下：</p><blockquote><p>[name]，指代入口文件的name，也就是上面提到的entry参数的key，因此，我们可以在name里利用/，即可达到控制文件目录结构的效果。<br>[hash]，指代本次编译的一个hash版本，值得注意的是，只要是在同一次编译过程中生成的文件，这个[hash]的值就是一样的；在缓存的层面来说，相当于一次全量的替换。<br>[chunkhash]，指代的是当前chunk的一个hash版本，也就是说，在同一次编译中，每一个chunk的hash都是不一样的；而在两次编译中，如果某个chunk根本没有发生变化，那么该chunk的hash也就不会发生变化。这在缓存的层面上来说，就是把缓存的粒度精细到具体某个chunk，只要chunk不变，该chunk的浏览器缓存就可以继续使用。</p></blockquote><h5 id="resolve-配置模块查询路径"><a href="#resolve-配置模块查询路径" class="headerlink" title="resolve 配置模块查询路径"></a>resolve 配置模块查询路径</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">  <span class="comment">//fallback: [path.join(__dirname, '../node_modules')],//先查询alias,再在此路径下搜索</span></span><br><span class="line">  alias:&#123;</span><br><span class="line">  <span class="string">'spin'</span>:path.resolve(ROOT_PATH,<span class="string">'./src/assets/spin.min'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resolve</code>可以设置模块别名或路径别名,这种我们在代码中<code>require(&#39;spin&#39;)</code>就行，不再需要加上长长的路径了。<br>带来的便利：可以加载一些不是通过<code>npm install</code>下来的本地插件代码（当然先得保证代码是符合模块化规范的）<br>还有一个好处就是：指定加载’npm’模块的其实版本，如压缩后的版本；这样可以节省编译时间，当能代码的可读性会比较差。</p><h5 id="externals-配置把全局变量转为模块"><a href="#externals-配置把全局变量转为模块" class="headerlink" title="externals 配置把全局变量转为模块"></a>externals 配置把全局变量转为模块</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    <span class="string">'react'</span>: <span class="string">'React'</span>,</span><br><span class="line">    <span class="string">'react-dom'</span>: <span class="string">'ReactDOM'</span>,</span><br><span class="line">    <span class="string">'jquery'</span>:<span class="string">'window.jQuery'</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>有时候我们希望某些模块走CDN并以<code>&lt;script&gt;</code>的形式挂载到页面上来加载，但又希望能在webpack 的模块中使用上。此时我们就可以利用<code>externals</code>进行配置。</p><h5 id="devtool配置-souremap输出模式配置"><a href="#devtool配置-souremap输出模式配置" class="headerlink" title="devtool配置 souremap输出模式配置"></a>devtool配置 <code>souremap</code>输出模式配置</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">'cheap-module-source-map'</span>,</span><br></pre></td></tr></table></figure><p>sourceMap主要功能就是利用开发调试，特别是采用自动化工具后代码编译压缩后；如果没有<code>sourceMap</code>调试几乎不可能。</p><p><code>souremap</code>模式配置有下面几种：</p><blockquote><p><code>eval</code>每个模块被转化为字符串，在尾部添加//# souceURL（指明eval前文件）后，被eval包裹起来<br><code>source-map</code>最原始的source-map实现方式，打包代码的同时生成一个sourcemap文件，并在打包文件的末尾添加//# souceURL，注释会告诉JS引擎原始文件位置<br><code>hidden-source-map</code>打包结果与source-map一致，但是.map文件结尾不显示//# sourceMappingURL<br><code>inline-source-map</code>为打包前的每个文件添加sourcemap的dataUrl，追加到打包后文件内容的结尾；此处，dataUrl包含一个文件完整 souremap 信息的 Base64 格式化后的字符串<br><code>eval-source-map</code>将每个模块转化为字符串，使用eval包裹，并将打包前每个模块的sourcemap信息转换为Base64编码，拼接在每个打包后文件的结尾<br><code>cheap-source-map</code>同source-map,但不包含列信息，不包含 loader 的 sourcemap，（譬如 babel 的 sourcemap）<br><code>cheap-module-source-map</code>不包含列信息，同时 loader 的 sourcemap 也被简化为只包含对应行的。最终的 sourcemap 只有一份，它是 webpack 对 loader 生成的 sourcemap 进行简化，然后再次生成的</p></blockquote><p>实用配置：</p><blockquote><p>开发环境推荐：<code>cheap-module-eval-source-map</code>生产环境推荐：<code>cheap-module-source-map</code></p></blockquote><p>想了解souremap工作原理，可以读读阮一峰老师的<a href="http://http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html" target="_blank" rel="noopener">《JavaScript Source Map 详解》</a></p><h5 id="module配置–加载器配置。"><a href="#module配置–加载器配置。" class="headerlink" title="module配置–加载器配置。"></a>module配置–加载器配置。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    <span class="comment">//前置加载器(webpack2.1.0后移除了，使用：[enforce: "pre"])</span></span><br><span class="line">    preLoaders: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">"eslint-loader"</span>,<span class="attr">include</span>:APP_PATH, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//加载器配置</span></span><br><span class="line">    loaders:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">"style-loader!css-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">'jsx-loader?harmony'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loaders</span>: [<span class="string">"css-loader"</span>,<span class="string">"sass-loader"</span>]&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>加载器主要用于编译处理各类相关文件；如<code>SCSS</code>文件需要sass-loader；进行处理；</p><blockquote><p><code>test</code>接受一个表达式配置相关文件。<br><code>loader</code>接受一个字符串。采用管道形式，如上面代码表达先用css-loader处理再交给style-loader，<code>?</code>后面的为加载器的参数。<br>不爽的话可以用<code>loaders</code>代替;</p><h5 id="plugins配置"><a href="#plugins配置" class="headerlink" title="plugins配置"></a>plugins配置</h5></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">     <span class="comment">//定义一个全局变量，在其他模块里可以直接使用该变量</span></span><br><span class="line">     <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">     <span class="string">'FFFF'</span>: <span class="string">"ENV...ENV"</span></span><br><span class="line">   &#125;),</span><br><span class="line">   <span class="keyword">new</span> HtmlwebpackPlugin(&#123;</span><br><span class="line">     title:<span class="string">"app test"</span>,</span><br><span class="line">     template:<span class="string">'index.html'</span></span><br><span class="line">   &#125;),</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure><p><code>plugins</code>能完成webpack基本功能以外的一些功能；在我们开发与<code>build</code>的时候很有用。后面我们会详情讲解一些常用插件的作用及配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;最近特别火，只是项目中暂时还没有使用，最近花了点时间学习了下；以备不时之需；&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://jekion.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>组件之间的通信-vuejs学习笔记</title>
    <link href="http://jekion.com/2016/11/23/vuejs_notes_5/"/>
    <id>http://jekion.com/2016/11/23/vuejs_notes_5/</id>
    <published>2016-11-23T14:20:38.000Z</published>
    <updated>2016-11-24T08:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>vuejs组件之间的通信，可分为父子之间，与非父子之间的通信；父子之间通信相对简单一些；下面是我对这两种通信的理解。</p><a id="more"></a><h3 id="父子之间的通信"><a href="#父子之间的通信" class="headerlink" title="父子之间的通信"></a>父子之间的通信</h3><p>父子之间通信；父组件可以通过动态<code>props</code>传递数据组子组件，但这种传递是单向绑定的；当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止<code>子组件无意修改了父组件的状态</code>——这会让应用的数据流难以理解。<br>那问题来了：如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！</p><blockquote><p>每个 Vue 实例都实现了事件接口(Events interface)，即：<br> 使用 $on(eventName) 监听事件<br> 使用 $emit(eventName) 触发事件</p></blockquote><p>子组件可以监听一个自定义事件—触发调用<code>父组件的一个方法</code>；把数据作为参数传递给该方法；</p><h5 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--(@postv="getChildValue");`postv`为子组件自定义事件，getChildValue为父组件的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">postv</span>=<span class="string">"getChildValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"> &#123;&#123;childvalue&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> childobj = &#123;</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      username:<span class="string">""</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  template:<span class="string">"&lt;input type='text' v-model='username'/&gt;"</span>,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    username:<span class="function"><span class="keyword">function</span>(<span class="params">nval</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"postv"</span>,nval); <span class="comment">//触发'postv'</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    childvalue:<span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">  <span class="string">"child"</span>:childobj </span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">   getChildValue:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.childvalue=val;</span><br><span class="line">   &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="简单的非父子之间的通信"><a href="#简单的非父子之间的通信" class="headerlink" title="简单的非父子之间的通信"></a>简单的非父子之间的通信</h3><p>简单的非父子之间的通信我们可以通过一个中间Vue实例的自定义事件来实现数据传递，两个组件之间一个实现事件监听；一个触发此事件，通过参数进行数据传递。</p><h5 id="DEMO-1"><a href="#DEMO-1" class="headerlink" title="DEMO"></a>DEMO</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>简单非父子通信<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">compo1</span>&gt;</span><span class="tag">&lt;/<span class="name">compo1</span>&gt;</span> <span class="comment">&lt;!--组件1--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">compo2</span>&gt;</span><span class="tag">&lt;/<span class="name">compo2</span>&gt;</span> <span class="comment">&lt;!--组件2--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();<span class="comment">//中间VUE实例</span></span><br><span class="line">Vue.component(<span class="string">"compo1"</span>,&#123;</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">      inputvalue:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template:<span class="string">"&lt;input type='text' v-model='inputvalue'/&gt;"</span>,</span><br><span class="line">  watch:&#123;</span><br><span class="line">  inputvalue:<span class="function"><span class="keyword">function</span>(<span class="params">nval</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(nval);</span><br><span class="line">     bus.$emit(<span class="string">"sendval"</span>,nval);<span class="comment">//触发bus的自定义事件`sendval`</span></span><br><span class="line">  &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"compo2"</span>,&#123;</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        inputvalue:<span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//放在mounted中运行一次</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">     bus.$on(<span class="string">"sendval"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="comment">//bus监听自定义事件`sendval`</span></span><br><span class="line">      vm.inputvalue = i;</span><br><span class="line">     &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  template:<span class="string">"&lt;input type='text' v-model='inputvalue'/&gt;"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="复杂项目组件之间通信"><a href="#复杂项目组件之间通信" class="headerlink" title="复杂项目组件之间通信"></a>复杂项目组件之间通信</h3><p>上面的通信，应付小型项目差不多，但面对复杂的应用，由于多个状态分散的跨越在许多组件和交互间各个角落，复杂度也经常逐渐增长。单采用前面两种方式处理；数据将就得难于维护；为了解决这个问题；我们得引进<code>状态管理模式</code>；<br><a href="http://cn.vuejs.org/v2/guide/state-management.html" target="_blank" rel="noopener">进一步了解</a><br><code>vuex</code>是专门为<code>vue</code>开发的状态管理插件；</p><p>vuex说的通俗点就是建立一个公共的存储区域，所有的组件遵循相同的约定对公共数据进行读取及更新；</p><h5 id="DEMO-2"><a href="#DEMO-2" class="headerlink" title="DEMO"></a>DEMO</h5><p>1.项目用引用<code>vuex</code><br><a href="http://vuex.vuejs.org/zh-cn/installation.html" target="_blank" rel="noopener"><strong>安装</strong></a>;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">compo1</span>&gt;</span><span class="tag">&lt;/<span class="name">compo1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">compo2</span>&gt;</span><span class="tag">&lt;/<span class="name">compo2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(Vuex);<span class="comment">//安装 Vuxe插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123; <span class="comment">//实例一个Store</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state,val) &#123;</span><br><span class="line">      state.count=val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  store,  <span class="comment">//注入store实例</span></span><br><span class="line">  data:&#123;</span><br><span class="line">    childvalue:<span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"compo1"</span>,&#123;</span><br><span class="line">  computed:&#123;</span><br><span class="line">    number:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count;<span class="comment">//计算属性number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template:<span class="string">"&lt;input type='text' v-model='number'/&gt;"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"compo2"</span>,&#123;</span><br><span class="line"> </span><br><span class="line">  template:<span class="string">"&lt;input type='text' v-model='number'/&gt;\</span></span><br><span class="line"><span class="string">  &lt;button class='btn btn-primary'\ @click='addOne'&gt;vuex&lt;/button&gt;\</span></span><br><span class="line"><span class="string">  &lt;div&gt;\</span></span><br><span class="line"><span class="string">"</span>,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  addOne:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"increment"</span>,<span class="keyword">this</span>.number);<span class="comment">//通过`commit`传递数据；</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/jqy518/pen/MbowXw" target="_blank" rel="noopener">DEMO最终效果</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vuejs组件之间的通信，可分为父子之间，与非父子之间的通信；父子之间通信相对简单一些；下面是我对这两种通信的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vuejs" scheme="http://jekion.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>style_class绑定---vueJS学习笔记</title>
    <link href="http://jekion.com/2016/11/20/vuejs_notes_4/"/>
    <id>http://jekion.com/2016/11/20/vuejs_notes_4/</id>
    <published>2016-11-20T13:20:38.000Z</published>
    <updated>2016-11-21T07:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个相对没什么难度，多练习加强印像。主要区分<code>属性名</code>与<code>vuejs属性</code>的就行。</p><a id="more"></a><p>测试代码贴下：</p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--class为对象‘btn-primary’依赖变量‘primary’--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">:class</span>=<span class="string">"&#123;'btn-primary':primary&#125;"</span> @<span class="attr">click</span>=<span class="string">"setVue('primary',primary)"</span>&gt;</span>DEFAULT<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!--class为变量‘dangerBtn’--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"dangerBtn"</span> @<span class="attr">mouseover</span>=<span class="string">"cangerD"</span>&gt;</span>DANGER<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--class为计算变量‘computedAttr’--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"computedAttr"</span> &gt;</span>WARNING<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--class为数组--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"['btn','btn-default']"</span> &gt;</span>DEFAULT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--class为数组加表达式--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"['btn',warning ? 'btn-warning' : '']"</span>&gt;</span>DEFAULT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--class为数组加对象--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">"['btn',&#123;'btn-primary':primary&#125;]"</span> &gt;</span>DEFAULT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!--组件class赋值--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--style的CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;textAlign:'center'&#125;"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">class-com</span> <span class="attr">:style</span>=<span class="string">"comStyleObj"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">size</span>=<span class="string">"btn-lg"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-com</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> classcom = &#123;</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      buttonsize:<span class="keyword">this</span>.size,</span><br><span class="line">      generatorObj:<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.generatorObj=<span class="keyword">this</span>.generatorstr();</span><br><span class="line">  &#125;,</span><br><span class="line">  props:[<span class="string">"size"</span>],</span><br><span class="line">  template:<span class="string">"&lt;button @click='changsize' :class='buttonsize'&gt;看我七十二变&lt;/button&gt;"</span>,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    changsize:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> sizeobj = <span class="keyword">this</span>.generatorObj.next();</span><br><span class="line">      <span class="keyword">if</span>(sizeobj.done)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sizeobj);</span><br><span class="line">        <span class="keyword">this</span>.generatorObj=<span class="keyword">this</span>.generatorstr();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.buttonsize = sizeobj.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    generatorstr: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="string">'btn-md'</span>;</span><br><span class="line">      <span class="keyword">yield</span> <span class="string">'btn-sm'</span>;</span><br><span class="line">      <span class="keyword">yield</span> <span class="string">'btn-xs'</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'btn-lg'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    primary:<span class="literal">true</span>,</span><br><span class="line">    dangerBtn:&#123;</span><br><span class="line">      btn:<span class="literal">true</span>,</span><br><span class="line">      <span class="string">'btn-danger'</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    warning:<span class="literal">true</span>,</span><br><span class="line">    comStyleObj:&#123;</span><br><span class="line">      marginTop:<span class="string">'20px'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    setVue:<span class="function"><span class="keyword">function</span>(<span class="params">key,currValue</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(currValue)&#123;</span><br><span class="line">        <span class="keyword">this</span>[key]=<span class="literal">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>[key]=<span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    cangerD:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.dangerBtn[<span class="string">"btn-danger"</span>]);</span><br><span class="line">      <span class="keyword">this</span>.dangerBtn[<span class="string">"btn-danger"</span>] ? <span class="keyword">this</span>.dangerBtn[<span class="string">"btn-danger"</span>]=<span class="literal">false</span> : <span class="keyword">this</span>.dangerBtn[<span class="string">"btn-danger"</span>] =<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    computedAttr: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        btn:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">'btn-warning'</span>:!<span class="keyword">this</span>.primary</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">'class-com'</span>:classcom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/jqy518/pen/zoZGOK" target="_blank" rel="noopener">DEMO最终效果</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个相对没什么难度，多练习加强印像。主要区分&lt;code&gt;属性名&lt;/code&gt;与&lt;code&gt;vuejs属性&lt;/code&gt;的就行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vuejs" scheme="http://jekion.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>简单的翻页组件实现---vueJS学习笔记</title>
    <link href="http://jekion.com/2016/11/20/vuejs_notes_3/"/>
    <id>http://jekion.com/2016/11/20/vuejs_notes_3/</id>
    <published>2016-11-20T12:10:36.000Z</published>
    <updated>2016-11-21T02:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习使用vueJS是一种享受，上手容易，关键在于强大的中文文档（对于我这种英语水平很low的角色真是帮了大忙）;你会发现文档讲的很细腻,很周全;让你在阅读的时候会有一种感激之情无以言表的激动;(哈哈..至少我有这样的赶脚).但尤哥也说了<code>我没有责任舍却陪老婆孩子的时间来翻译成中文帮你节省学习英语的时间</code>;说的好啊!一针见血(惭愧);走码农这条路不会英语真的会落后很多的,只能默默的多花时间在词汇上面了.</p><a id="more"></a><p>说多了,言归正传;我们来看看这个<code>简单的翻页组件</code>实现的过程及之间遇到的一些问题;(相比<code>angularJS</code>;用<code>vuejs</code>实现真的简单了许多;代码如下</p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li_item</span> <span class="attr">v-for</span>=<span class="string">"item in listArr"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">:item</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li_item</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pagecontrol</span> <span class="attr">pagenum</span>=<span class="string">"10"</span> <span class="attr">purl</span>=<span class="string">"http://www.jekion.com"</span> <span class="attr">currnum</span>=<span class="string">"1"</span> <span class="attr">v-on:input</span>=<span class="string">"cArrlist"</span>&gt;</span><span class="tag">&lt;/<span class="name">pagecontrol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li_item = Vue.component(<span class="string">"li_item"</span>,&#123;</span><br><span class="line">  props:[<span class="string">"item"</span>],</span><br><span class="line">  template:<span class="string">"&lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;"</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> pageControl = &#123;</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     cnum:<span class="keyword">this</span>.currnum,</span><br><span class="line">     pnum:<span class="keyword">this</span>.pagenum,</span><br><span class="line">     dlist:[],</span><br><span class="line">     totalnum:<span class="number">10</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  props:[<span class="string">"currnum"</span>,<span class="string">"pagenum"</span>,<span class="string">"purl"</span>],</span><br><span class="line">  template:<span class="string">"&lt;nav&gt;&lt;ul class='pagination'&gt;"</span>+</span><br><span class="line">  <span class="string">"&lt;li v-for='n in numArr' :class=\"&#123;active:(n==cnum)&#125;\"&gt;"</span>+</span><br><span class="line">  <span class="string">"&lt;a v-bind:href='urljoin(n)' @click.prevent='cnumchange(n)'&gt;"</span>+</span><br><span class="line">  <span class="string">"&#123;&#123;n&#125;&#125;&lt;/a&gt;&lt;/li&gt;"</span>+</span><br><span class="line">  <span class="string">"&lt;/ul&gt;&lt;/nav&gt;"</span>,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    numArr:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> arr = [];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="keyword">this</span>.totalnum;i++)&#123;</span><br><span class="line">        arr.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">   urljoin:<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.purl+<span class="string">"?page="</span>+n;</span><br><span class="line">   &#125;,</span><br><span class="line">   cnumchange:<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.cnum=n;</span><br><span class="line">   &#125;,</span><br><span class="line">   fetchData:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> temporaryArr = [];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">       temporaryArr.push(<span class="string">"测试列表:"</span>+<span class="built_in">Math</span>.random());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">this</span>.dlist=temporaryArr;</span><br><span class="line">     <span class="keyword">this</span>.$emit(<span class="string">"input"</span>,<span class="keyword">this</span>.dlist);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    cnum:<span class="function"><span class="keyword">function</span>(<span class="params">nvalue</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    listArr:[<span class="string">"test1"</span>,<span class="string">"bbbb"</span>] </span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    cArrlist:<span class="function"><span class="keyword">function</span>(<span class="params">listv</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.listArr=listv;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    pagecontrol:pageControl</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/jqy518/pen/zoNmVj" target="_blank" rel="noopener">最终效果DEMO</a></p><h4 id="思路与问题"><a href="#思路与问题" class="headerlink" title="思路与问题"></a>思路与问题</h4><p>思路:父组件通过<code>pagecontrol</code>组件的属性向翻页组件传递初始化数据包扩：当前页<code>currnum</code>;每页显示条数<code>pagenum</code>;查询地址<code>purl</code>(注意：pagecontrol中purl可以不用赋值给a的href,这里为了练习我加上了);<code>pagecontrol</code>组件传递给父组件查询出来的列表数据；<br>问题：父组件与<code>pagecontrol</code>之间的数据传递；官网描述：</p><blockquote><p> 父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息;总结为<code>props down, events up</code></p></blockquote><p>这里我们采用组件内部属性接收父组件传递的数据;不去直接改变<code>this.currnum</code>,<code>this.pagenum</code>的值；(直接改变vue会抛出警告)；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     cnum:<span class="keyword">this</span>.currnum,</span><br><span class="line">     pnum:<span class="keyword">this</span>.pagenum,</span><br><span class="line">     dlist:[],</span><br><span class="line">     totalnum:<span class="number">10</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>翻页后<code>pagecontrol</code>组件通过触发自定义事件把数据返回给父组件；<br>父组件监听：<code>v-on:input=&quot;cArrlist&quot;</code><br>子组件触发：<code>this.$emit(&quot;input&quot;,this.dlist);</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习使用vueJS是一种享受，上手容易，关键在于强大的中文文档（对于我这种英语水平很low的角色真是帮了大忙）;你会发现文档讲的很细腻,很周全;让你在阅读的时候会有一种感激之情无以言表的激动;(哈哈..至少我有这样的赶脚).但尤哥也说了&lt;code&gt;我没有责任舍却陪老婆孩子的时间来翻译成中文帮你节省学习英语的时间&lt;/code&gt;;说的好啊!一针见血(惭愧);走码农这条路不会英语真的会落后很多的,只能默默的多花时间在词汇上面了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="vuejs" scheme="http://jekion.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vuejs计算属性---vueJS学习笔记</title>
    <link href="http://jekion.com/2016/11/18/vuejs_notes_2/"/>
    <id>http://jekion.com/2016/11/18/vuejs_notes_2/</id>
    <published>2016-11-18T14:10:59.000Z</published>
    <updated>2016-11-21T00:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vuejs计算属性"><a href="#vuejs计算属性" class="headerlink" title="vuejs计算属性"></a>vuejs计算属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;computedAttr&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    attr:<span class="string">"hello world!!"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    computedAttr:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> strarr = <span class="keyword">this</span>.attr.split(<span class="string">''</span>);</span><br><span class="line">      <span class="keyword">var</span> newarr = strarr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v,index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index%<span class="number">2</span>===<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> newarr.join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>methods</code>,<code>filter</code>,<code>watch</code>等都可以达到同样效果；</p><blockquote><p>与<code>methods</code>相比：计算属性是基于它的依赖缓存；<br>计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 依赖的属性没有发生改变，多次访问 计算属性会立即返回之前的计算结果，而不必再次执行函数。<code>所以返回new Date()或Math.random这类不依赖原属性但又会变化的值时不会变化</code>；<br>method 调用总会执行函数。</p><p>与<code>watch</code>相比：在处理多个属性依赖的计算，计算属性更有优势。</p></blockquote><h3 id="计算属性的getter与setter"><a href="#计算属性的getter与setter" class="headerlink" title="计算属性的getter与setter"></a>计算属性的getter与setter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/jqy518/pen/MbbZeN" target="_blank" rel="noopener">测试DEMO</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vuejs计算属性&quot;&gt;&lt;a href=&quot;#vuejs计算属性&quot; class=&quot;headerlink&quot; title=&quot;vuejs计算属性&quot;&gt;&lt;/a&gt;vuejs计算属性&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--文本输出--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;computedAttr&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  el:&lt;span class=&quot;string&quot;&gt;&quot;#app&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attr:&lt;span class=&quot;string&quot;&gt;&quot;hello world!!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  computed:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    computedAttr:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; strarr = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.attr.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newarr = strarr.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v,index&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;===&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newarr.join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vuejs" scheme="http://jekion.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vuejs模板语法---vueJS学习笔记</title>
    <link href="http://jekion.com/2016/11/17/vuejs_notes_1/"/>
    <id>http://jekion.com/2016/11/17/vuejs_notes_1/</id>
    <published>2016-11-17T14:10:59.000Z</published>
    <updated>2016-11-18T07:08:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vuejs模板语法"><a href="#vuejs模板语法" class="headerlink" title="vuejs模板语法"></a>vuejs模板语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-once--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"htmlstr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"'list_'+item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--javascript表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; showMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--methods的方法直接调用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message | capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message | capitalize(arg1,arg2) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!--arg1,arg2分别为capitalize的第二，三个参数，第一参数为表达式的值message--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dom事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p><code>v-once</code>执行一次性地插值，当数据改变时，插值处的内容不会更新。<br>  <code>v-html</code>要确保插入内容的安全性，避免XSS攻击<br>  过滤器函数总接受表达式的<code>值</code>作为<code>第一个参数</code>。</p></blockquote><p><a href="http://codepen.io/jqy518/pen/Rooegm" target="_blank" rel="noopener">模板语法测试DEMO</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vuejs模板语法&quot;&gt;&lt;a href=&quot;#vuejs模板语法&quot; class=&quot;headerlink&quot; title=&quot;vuejs模板语法&quot;&gt;&lt;/a&gt;vuejs模板语法&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--文本输出--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--v-once--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-once&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--html--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-html&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;htmlstr&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--属性--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-bind:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item.id&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&#39;list_&#39;+item.id&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--javascript表达式--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; ok ? &#39;YES&#39; : &#39;NO&#39; &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; showMessage() &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--methods的方法直接调用--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--过滤器--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; message | capitalize &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; message | capitalize(arg1,arg2) &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--arg1,arg2分别为capitalize的第二，三个参数，第一参数为表达式的值message--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--dom事件--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-on:click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doSomething&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doSomething&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vuejs" scheme="http://jekion.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>php5.5等不能加载php_curl.dll的解决办法</title>
    <link href="http://jekion.com/2016/11/08/php_curl/"/>
    <id>http://jekion.com/2016/11/08/php_curl/</id>
    <published>2016-11-08T00:10:59.000Z</published>
    <updated>2016-11-08T03:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置php环境变量"><a href="#配置php环境变量" class="headerlink" title="配置php环境变量"></a>配置php环境变量</h3><p>php要下载安全版本;<br>php_curl.dll有相关依赖及php默认非开启需要进行一些配置：<br>1）设置windows系统环境变量：</p><blockquote><p>phpext, 指向e:\php5.4\ext<br>  PHPRC 指向e:\php5.4<br>  设置path环境变量，添加e:\php5.4</p></blockquote><a id="more"></a><p>2)php.ini配置</p><blockquote><p>extension_dir 指向e:\php5.4\ext;<br>  开启php_curl.dll;(去掉前面的‘;’号)</p></blockquote><h3 id="httpd-conf加载相关依赖："><a href="#httpd-conf加载相关依赖：" class="headerlink" title="httpd.conf加载相关依赖："></a>httpd.conf加载相关依赖：</h3><p>查看<code>php_curl.dll</code>中相关依赖,我们可以利用<code>dependencywalker</code>查看:<br>下载地址:<a href="http://www.dependencywalker.com/" target="_blank" rel="noopener">dependencywalker</a>;<br>配置加载相关依赖:</p><blockquote><p>LoadFile D:/Lamp/php5/php5ts.dll<br>LoadFile D:/Lamp/php5/libeay32.dll<br>LoadFile D:/Lamp/php5/ssleay32.dll<br>LoadFile D:/Lamp/php5/libssh2.dll</p></blockquote><p>(转载自：<a href="http://www.uuling.com/2015/08/29/win10%E3%80%81win8%E5%92%8Cwin7%E4%B8%8B%E8%A7%A3%E5%86%B3php5-3%E5%92%8C5-4%E3%80%815-5%E7%AD%89%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BDphp_curl-dll%E7%9A%84%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E5%8A%9E/" target="_blank" rel="noopener">win10、win8和win7下解决php5.3和5.4、5.5等不能加载php_curl.dll的终极解决办法</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置php环境变量&quot;&gt;&lt;a href=&quot;#配置php环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置php环境变量&quot;&gt;&lt;/a&gt;配置php环境变量&lt;/h3&gt;&lt;p&gt;php要下载安全版本;&lt;br&gt;php_curl.dll有相关依赖及php默认非开启需要进行一些配置：&lt;br&gt;1）设置windows系统环境变量：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;phpext, 指向e:\php5.4\ext&lt;br&gt;  PHPRC 指向e:\php5.4&lt;br&gt;  设置path环境变量，添加e:\php5.4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jekion.com/tags/php/"/>
    
  </entry>
  
</feed>
